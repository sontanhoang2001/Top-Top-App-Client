import { Fragment, useEffect, useState } from 'react';
import { styled } from '@mui/material/styles';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import CssBaseline from '@mui/material/CssBaseline';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import IconButton from '@mui/material/IconButton';
import Paper from '@mui/material/Paper';
import Fab from '@mui/material/Fab';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemAvatar from '@mui/material/ListItemAvatar';
import ListItemText from '@mui/material/ListItemText';
import ListSubheader from '@mui/material/ListSubheader';
import Avatar from '@mui/material/Avatar';
import MenuIcon from '@mui/icons-material/Menu';
import AddIcon from '@mui/icons-material/Add';
import SearchIcon from '@mui/icons-material/Search';
import MoreIcon from '@mui/icons-material/MoreVert';
import { Chip } from '@mui/material';

// Auth provider
import { UserAuth } from '~/context/AuthContext';
import { Link, useParams } from 'react-router-dom';

// 
import notificationApi from '~/api/notification';

const messages = [
    {
        id: 1,
        primary: 'Brunch this week?',
        secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
        person: '/static/images/avatar/5.jpg',
    },
    {
        id: 2,
        primary: 'Birthday Gift',
        secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
        person: '/static/images/avatar/1.jpg',
    },
    {
        id: 3,
        primary: 'Recipe to try',
        secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
        person: '/static/images/avatar/2.jpg',
    },
    {
        id: 4,
        primary: 'Yes!',
        secondary: 'I have the tickets to the ReactConf for this year.',
        person: '/static/images/avatar/3.jpg',
    },
    {
        id: 5,
        primary: "Doctor's Appointment",
        secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
        person: '/static/images/avatar/4.jpg',
    },
    {
        id: 6,
        primary: 'Discussion',
        secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
        person: '/static/images/avatar/5.jpg',
    },
    {
        id: 7,
        primary: 'Summer BBQ',
        secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
        person: '/static/images/avatar/1.jpg',
    },
];

const StyledFab = styled(Fab)({
    position: 'absolute',
    zIndex: 1,
    top: -30,
    left: 0,
    right: 0,
    margin: '0 auto',
});

var resoureUrl;
const initialPageSize = 8;
const estringNotificationType = [
    "Đã thích video của bạn",
    "Đã bình luận video của bạn",
    "Đã trả lời video của bạn",
    "Đã theo dõi bạn",
    "Đã gửi tin nhắn đến bạn",
];

export default function BottomAppBar() {
    const { user } = UserAuth();
    const { notificationType } = useParams();

    const [notifition, setNotifition] = useState();
    const [pageNo, setPageNo] = useState(1);
    const [pageSize, setPageSize] = useState(initialPageSize);
    const [hasMore, setHasMore] = useState(true);
    const [totalElements, setTotalElements] = useState();

    const translatePastTime = (pastTime) => {
        // moments ago, 1 second ago, 1 minute ago, 1 hour ago, 1 week ago, 1 month ago, 1 year ago,
        // console.log("pastTime: ",  pastTime)
    }

    const getEnumNotificationType = (notificationType, content) => {
        if (notificationType === 1 || notificationType === 2 || notificationType === 4) {
            return `${estringNotificationType[notificationType]}: ${content}`;
        }

        return `${estringNotificationType[notificationType]}`
    }

    useEffect(() => {
        console.log("notificationType: ", notificationType)

        if (notificationType == 0 || notificationType == undefined) {
            notificationApi.getNotificationByUserId(user.id, pageNo, pageSize)
                .then(res => {
                    console.log("res.data.dat: ", res.data.data)
                    setNotifition(res.data.data);
                })
                .catch(error => console.log(error))
        } else if (notificationType == 1) {
            notificationApi.getNotificationByUserIdAndUnread(user.id, pageNo, pageSize)
                .then(res => {
                    setNotifition(res.data.data);
                })
                .catch(error => console.log(error))
        }
    }, [notificationType])

    return (
        <div className='container__center'>
            {/* <CssBaseline /> */}
            <Paper square sx={{ pb: '50px' }}>
                <Typography variant="h5" gutterBottom component="div" sx={{ p: 2, pb: 0 }}>
                    Thông báo mới
                </Typography>

                <Box sx={{ ml: 2 }}>
                    <Link to='/notification/0' className='link'>
                        <Chip label="Mới nhất" component="a" clickable sx={{ marginRight: '0.4rem' }} color={(notificationType == 0 || notificationType == undefined) ? 'primary' : 'default'} />
                    </Link>
                    <Link to='/notification/1' className='link'>
                        <Chip label="Chưa đọc" component="a" clickable sx={{ marginRight: '0.4rem' }} color={notificationType == 1 ? 'primary' : 'default'} />
                    </Link>
                </Box>

                <List sx={{ mb: 2 }}>
                    {notifition && notifition.map(({ id, userFrom, notificationType, content, readed, pastTime }) => (
                        <Fragment key={id}>
                            {id === 1 && (
                                <ListSubheader sx={{ bgcolor: 'background.paper' }}>
                                    Hôm nay
                                </ListSubheader>
                            )}

                            {id === 3 && (
                                <ListSubheader sx={{ bgcolor: 'background.paper' }}>
                                    Hôm qua
                                </ListSubheader>
                            )}


                            <ListItem button sx={{ background: readed == false ? 'rgb(145 158 171 / 11%)' : '' }}>
                                <ListItemAvatar>
                                    <Avatar alt={userFrom.fullName} src={userFrom.avatar} />
                                </ListItemAvatar>
                                <ListItemText
                                    primary={(
                                        <Box display='flex'>
                                            <Typography variant='subtitle2' sx={{ marginRight: '5px' }}>{userFrom.fullName}</Typography>
                                            <Typography variant='body2'>{getEnumNotificationType(notificationType, content)}</Typography>
                                        </Box>
                                    )} secondary='5 giờ trước' />
                            </ListItem>
                        </Fragment>
                    ))}
                </List>
            </Paper>
        </div>
    );
}
